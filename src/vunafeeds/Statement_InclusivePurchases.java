/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditStudents.java
 *
 * Created on Aug 3, 2011, 11:36:25 AM
 */
package vunafeeds;

import java.awt.print.PrinterException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.logging.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Magondu
 */
public class Statement_InclusivePurchases extends javax.swing.JFrame {

    private Vector<Vector> tableData;
    JFrame frame;
    String statement;
    String payStatement;
    java.util.Date from;
    java.util.Date till;

    /** Creates new form EditStudents */
    public Statement_InclusivePurchases() {
        initComponents();
        tableData = new Vector<Vector>();
        setLocationRelativeTo(null);
        populate();
        statement = SuppliersPanel.stat;//get the search string from the credtorList frame
        payStatement = SuppliersPanel.payStat;
        get_data(statement,payStatement);


        // editTable.getModel().addTableModelListener(editTable);
    }

    public static String now(String from) {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(from);
        return sdf.format(cal.getTime());
    }

    public static String till(String till) {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(till);
        return sdf.format(cal.getTime());
    }

    /** This method is called from within the constructor to
     * initialize the form
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        leval = new javax.swing.JComboBox();
        Search = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        From = new com.toedter.calendar.JDateChooser();
        Till = new com.toedter.calendar.JDateChooser();
        print = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Supplier Inclusive Statement");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        editTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Particulars", "Debit Dr", "Credit Cr", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        editTable.setGridColor(new java.awt.Color(0, 204, 204));
        editTable.setInheritsPopupMenu(true);
        editTable.setName("Inclusive Statement"); // NOI18N
        jScrollPane1.setViewportView(editTable);

        jLabel3.setText("From:");

        jLabel4.setText("Till");

        jLabel2.setBackground(new java.awt.Color(110, 189, 235));
        jLabel2.setFont(new java.awt.Font("Cambria", 1, 18));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Supplier Comprehensive Statement");
        jLabel2.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel1.setText("Search using");

        leval.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        jLabel5.setText("Current Balance: ");

        total.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(From, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Till, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(leval, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(5, 5, 5)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(leval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Till, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(From, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        print.setBackground(new java.awt.Color(255, 255, 255));
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        edit.setBackground(new java.awt.Color(255, 255, 255));
        edit.setText("Go>>");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 483, Short.MAX_VALUE)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        String levalS = (String) leval.getSelectedItem();
        String param = Search.getText();
        String id = null;
        from = From.getDate();

//String dateF = from.toString();

        till = Till.getDate();

        String getCreditor = "SELECT * FROM creditors where " + levalS + " = '" + param + "' and Status = 'Active' ";
        String saleString = null;
        String payString = null;

        try {
            Class.forName("com.mysql.jdbc.Driver");

            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vunafeeds", "root", "");
            Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet srs = stmt.executeQuery(getCreditor);
            while (srs.next()) {
                id = srs.getString("Supplier_ID");
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd H:mm:ss");

            if (till == null || from == null) {
                saleString = "SELECT * FROM purchases where Supplier_ID = '" + id + "'";
                payString = "Select * from payments_made where Supplier_ID = " + id + "";
            } else {
                String f = sdf.format(from);
                String t = sdf.format(till);
                System.out.println(f);
                saleString = "SELECT * FROM purchases where Supplier_ID = '" + id + "'and Date > '" + f + "' and Date < '" + t + "' ";
                payString = "Select * from payments_made where Supplier_ID = " + id + "and Date > '" + f + "' and Date < '" + t + "'";
            }
            tableData.clear();
            get_data(saleString, payString);
        } catch (SQLException e) {
            System.out.println("2 Error : " + e);
        } catch (Exception ex) {
            System.out.println("Error 1:" + ex);
        }
    }//GEN-LAST:event_editActionPerformed

    
    private void get_data(String searchString, String payString) {
        try {
            String productID = null;
            String creditor = null;
            String prod_name = null;
            String creditor_name = null;
            String invoice = null;
            int amt = 0;
            String dat = null;
            String part = null;
            String type = null;

            //InvoiceNO	Amount	date	Customer_ID

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vunafeeds", "root", "");
            Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Statement stmt1 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Statement stmt2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Statement stmt3 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);

            ResultSet srs = stmt.executeQuery(searchString);
            ResultSet srs2 = null;

            while (srs.next()) {
                String saleID = srs.getString("PurchaseID");
                productID = srs.getString("ProductID");
                int quantity = Integer.parseInt(srs.getString("Quantity"));
                int rate = Integer.parseInt(srs.getString("Rate"));
                String date = srs.getString("Date");
                creditor = srs.getString("Supplier_ID");
                int totalS = quantity * rate;
                // System.out.println(creditor);

                ResultSet srs1 = stmt1.executeQuery("Select * from product where productId = " + productID + "");
                srs2 = stmt2.executeQuery("Select * from creditors where Supplier_ID = " + creditor + "");
                while (srs1.next()) {
                    prod_name = srs1.getString("productname");
                    //System.out.println(prod_name);
                }

                while (srs2.next()) {

                    creditor_name = srs2.getString("Name");
                    //System.out.println(creditor_name);
                }
                part = quantity + " " + prod_name;
                type = "Sale";
                int credit = 0;
                //System.out.println("finally"); 
                tableData.add(toVector(date, part,totalS,credit));

            }
            ResultSet srs3 = stmt3.executeQuery(payString);

            while (srs3.next()) {
                invoice = srs3.getString("InvoiceNO"); 
                invoice = "Invoive No: " + invoice;
                amt = Integer.parseInt(srs3.getString("Amount"));
                dat = srs3.getString("date");
                String cust = srs3.getString("Supplier_ID");
                type = "Payment";

                srs2 = stmt2.executeQuery("Select * from creditors where Supplier_ID = " + cust + " and Status = 'Active'");
                while (srs2.next()) {
                    creditor_name = srs2.getString("Name");
                    //System.out.println(creditor_name);
                }
                int debit = 0;
                tableData.add(toVector(dat,invoice,debit ,amt));
            }

            Vector columns = new Vector();
            columns.add("Date");
            columns.add("Particulars");
            columns.add("Debit Dr.");
            columns.add("Credit Cr.");
            columns.add("Balance");

            DefaultTableModel model = new DefaultTableModel(tableData, columns);
            editTable.setModel(model);
            editTable.setAutoCreateColumnsFromModel(false);
            
            sortAllRowsBy(model, 0, true);
             
            int bal = 0 ;
            
            if (tableData.isEmpty()) {
                JOptionPane.showMessageDialog(null, "NO records found. Please try again");
            } else {
                 
                int row = editTable.getRowCount();
                int r = 0;
                int intTotal = 0;
                while (r < row) {
                    
                    //get the current credit and debit so that we can calculate the balance at this time
                    int deb = Integer.parseInt(String.valueOf(editTable.getValueAt(r, 2)));
                    int cre = Integer.parseInt(String.valueOf(editTable.getValueAt(r, 3)));
                   
                    bal = bal + deb - cre ;
                    editTable.setValueAt(bal, r, 4);
                    
                    //int temp = Integer.parseInt(String.valueOf(editTable.getValueAt(r, 4)));
                    //  System.out.println(temp);
                    //intTotal = intTotal + temp;
                    //The above code selects a value from the table, converts it to a string then to and integerand finally 
                    //adds it to the total/ Impresssive i know!! 
                    r++;
                }

                total.setText(String.valueOf(bal));
            }
        } catch (SQLException e) {
            System.out.println("2 Error : " + e);
        } catch (Exception ex) {
            System.out.println("Error 1:" + ex);
        }
    }

// Regardless of sort order (ascending or descending), null values always appear last.
// colIndex specifies a column in model.
    public void sortAllRowsBy(DefaultTableModel model, int colIndex, boolean ascending) {
        Vector data = model.getDataVector();
        Collections.sort(data, new ColumnSorter(colIndex, ascending));
        model.fireTableStructureChanged();
    }

// This comparator is used to sort vectors of data
    public class ColumnSorter implements Comparator {

        int colIndex;
        boolean ascending;

        ColumnSorter(int colIndex, boolean ascending) {
            this.colIndex = colIndex;
            this.ascending = ascending;
        }

        @Override
        public int compare(Object a, Object b) {
            Vector v1 = (Vector) a;
            Vector v2 = (Vector) b;
            Object o1 = v1.get(colIndex);
            Object o2 = v2.get(colIndex);

            // Treat empty strains like nulls
            if (o1 instanceof String && ((String) o1).length() == 0) {
                o1 = null;
            }
            if (o2 instanceof String && ((String) o2).length() == 0) {
                o2 = null;
            }

            // Sort nulls so they appear last, regardless
            // of sort order
            if (o1 == null && o2 == null) {
                return 0;
            } else if (o1 == null) {
                return 1;
            } else if (o2 == null) {
                return -1;
            } else if (o1 instanceof Comparable) {
                if (ascending) {
                    return ((Comparable) o1).compareTo(o2);
                } else {
                    return ((Comparable) o2).compareTo(o1);
                }
            } else {
                if (ascending) {
                    return o1.toString().compareTo(o2.toString());
                } else {
                    return o2.toString().compareTo(o1.toString());
                }
            }
        }
    }
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            editTable.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Statement_InclusivePurchases.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_printActionPerformed

    private Vector toVector(String date, String partic, int debit , int credit) {
        Vector vector = new Vector();
        vector.add(date);
        vector.add(partic);
        vector.add(debit);
        vector.add(credit);

        return vector;
    }

    private void populate() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vunafeeds", "root", "");
            Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet srs = stmt.executeQuery("SELECT * FROM creditors where Status = 'Active'");
            ResultSetMetaData md = srs.getMetaData();

            // while (srs.next()) 
            // {
            int colCount = md.getColumnCount();
            int c = 1;
            System.out.println(colCount);
            while (c <= colCount - 1)//The minus 1 is so that it cannot display the status collumn form the database
            {
                String colName = md.getColumnName(c);
                leval.addItem(colName);
                c++;
            }
        } // }
        catch (SQLException e) {
            System.out.println("2 Error : " + e);
        } catch (Exception ex) {
            System.out.println("Error 1:" + ex);
        }
    }
//public void tableEdited(TableModelEvent e)
//{
//        int row = e.getFirstRow();
//        int column = e.getColumn();
//        TableModel model = (TableModel)e.getSource();
//        String columnName = model.getColumnName(column);
//        Object data = model.getValueAt(row, column);
//        JOptionPane.showMessageDialog(null, "kuiva");
//
//} 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Statement_InclusivePurchases().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser From;
    private javax.swing.JTextField Search;
    private com.toedter.calendar.JDateChooser Till;
    private javax.swing.JButton edit;
    private javax.swing.JTable editTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox leval;
    private javax.swing.JButton print;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
