/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Purchases.java
 *
 * Created on Sep 8, 2011, 8:04:17 PM
 */
package vunafeeds;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author Magondu
 */
public class SalesItem extends javax.swing.JFrame {

    ArrayList<String> cName = new ArrayList<String>();
    ArrayList<String> cNumber = new ArrayList<String>();
    ArrayList<String> pName = new ArrayList<String>();
    ArrayList<String> pNumber = new ArrayList<String>();
    ArrayList<String> available = new ArrayList<String>();

    /** Creates new form Purchases */
    public SalesItem() {

        initComponents();
        populate();
        Date();
        setLocationRelativeTo(null);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rate = new javax.swing.JFormattedTextField();
        quantity = new javax.swing.JFormattedTextField();
        product = new javax.swing.JComboBox();
        admit = new javax.swing.JButton();
        DisplayDate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        avail = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sales");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(110, 189, 235));
        jLabel1.setFont(new java.awt.Font("Cambria", 1, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sales");
        jLabel1.setOpaque(true);

        jLabel3.setText("Product ID:");

        jLabel4.setText("Quantity:");

        jLabel5.setText("Rate:");

        rate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        rate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rateKeyReleased(evt);
            }
        });

        quantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        product.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productActionPerformed(evt);
            }
        });

        admit.setBackground(new java.awt.Color(255, 255, 255));
        admit.setText("Add");
        admit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitActionPerformed(evt);
            }
        });

        DisplayDate.setBackground(new java.awt.Color(110, 189, 235));
        DisplayDate.setOpaque(true);

        jLabel7.setText("Total Amount");

        total.setEditable(false);

        jLabel8.setText("Available:");

        avail.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DisplayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                            .addGap(43, 43, 43)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rate, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(product, 0, 258, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(admit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(avail, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)))
                        .addGap(39, 39, 39))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisplayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(admit, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productActionPerformed
        String productS = (String) product.getSelectedItem();
        //int pNum = pName.indexOf(productS); 
        //available.get(pNum);
        try {
            for (int i = 0; i < pName.size(); i++) {
                if (productS.equals(pName.get(i))) {
                    avail.setText(available.get(i));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No infromation on '" + productS + "' found");
            avail.setText("N/A");
        }
    }//GEN-LAST:event_productActionPerformed
    private void Date() {
        Calendar now = Calendar.getInstance();
        int y = now.get(Calendar.YEAR);
        int m = (now.get(Calendar.MONTH)) + 1;
        int d = now.get(Calendar.DATE);
        DisplayDate.setText("Today's date is " + d + " / " + m + " / " + y);
        DisplayDate.setVisible(true);

    }

    private void admitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitActionPerformed

        //String  = purchase.getText();
        String rateS = rate.getText();
        String quantityS = quantity.getText();
        String productS = (String) product.getSelectedItem();
        String Cnum = null;

        if (rateS.length() == 0 || quantityS.length() == 0 ) {
            JOptionPane.showMessageDialog(null, "Please fill all fields");
        } else {
            int pNum = pName.indexOf(productS);
            // int cNum = cName.indexOf(debtorsS);
            // System.out.println(pNum);


            String prodNum = pNumber.get(pNum);
            String availString = avail.getText();


            try {
                int availInt = Integer.parseInt(availString);
                int quantitiyInt = Integer.parseInt(quantityS);

                if (HomePage.toEdit.equals("EditSales")) {
                    availInt = 1000000000;
                }
                if (quantitiyInt > availInt) {
                    JOptionPane.showMessageDialog(null, "You cannot sell more than you have in store");
                } else {
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/VunaFeeds", "root", "");

                        if (HomePage.toEdit.equals("EditSales")) {
                            PreparedStatement psmt0 = con.prepareStatement("UPDATE sales set STATUS = 'Inactive' where STATUS = 'Active'");
                            psmt0.executeUpdate();                              
                        }

                        PreparedStatement psmt = con.prepareStatement("INSERT into sales(productID,quantity,rate,Customer_ID,date) values (?,?,?,?,?)");
                        psmt.setString(1, prodNum);
                        psmt.setString(2, quantityS);
                        psmt.setString(3, rateS);
                        psmt.setString(4, Cnum);
                        psmt.executeUpdate();

                        JOptionPane.showMessageDialog(null, "Item Sold");
//                if(avail.getText().equals("N/A"))
//                {
//                this.dispose();
//                Sales win = new Sales();
//                win.setVisible(true);
//                }
//                else{
                       
                        if(HomePage.toEdit.equals("EditSales"))
                        {
                            System.out.println("We cannot update the stock on an edit. Sorry :-)");
                        }
                        else
                        {
                        Statement stmt1 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                                ResultSet.CONCUR_READ_ONLY);
                        ResultSet rs1 = stmt1.executeQuery("Select * from new_stock where productID = '" + prodNum + "' and Status = 'Current'");
                        int previosQuan = 0;
                        int newQuantity = 0;
                        String newQuan = null;
                        if (rs1.next()) {
                            String prevQ = rs1.getString("Current");
                            previosQuan = Integer.parseInt(prevQ);
                            newQuantity = Integer.parseInt(quantityS);
                            newQuantity = previosQuan - newQuantity;
                            newQuan = String.valueOf(newQuantity);
                        }

                        PreparedStatement psmt0 = con.prepareStatement("UPDATE new_Stock set Status = 'Old' where Status = 'Current' and ProductId = '" + prodNum + "'");
                        PreparedStatement psmt1 = con.prepareStatement("INSERT into new_Stock(productID,Date,units,direction,status,current) values (?,?,?,?,?,?)");
                        psmt1.setString(1, prodNum);
                        psmt1.setString(3, quantityS);
                        psmt1.setString(4, "Out");
                        psmt1.setString(5, "Current");
                        psmt1.setString(6, newQuan);

                        psmt0.executeUpdate();
                        psmt1.executeUpdate();
                        
                    }
                        HomePage.toEdit = " ";
                        this.dispose();
                        SalesItem win = new SalesItem();
                        win.setVisible(true);


                    } catch (SQLException e) {

                        System.out.println("2 Error : " + e);
                        JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n " + e);
                    } catch (Exception ex) {
                        System.out.println("Error 1:" + ex);
                        JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n" + ex);
                    }
                }
            } catch (NumberFormatException ne) {
                JOptionPane.showMessageDialog(null, "The units should be written in numeric format only. E.g  5 not five");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        // TODO add your handling code here:
}//GEN-LAST:event_admitActionPerformed

    private void rateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateKeyReleased

        int quan = Integer.parseInt(quantity.getText());
        int rateS = Integer.parseInt(rate.getText());
        //double totalS         
        total.setText(Double.toString(quan * rateS));


    }//GEN-LAST:event_rateKeyReleased
    private void populate() {
        product.removeAllItems();
       
        try {
            int Dindex = 0;
            int Pindex = 0;
            int Sindex = 0;


            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vunafeeds", "root", "");
            Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);

            // product.removeAllItems();
             ResultSet rs;
             if(HomePage.toEdit.equals("EditSales"))
             {
            rs = stmt.executeQuery("Select * from product");
             }
             else
             {
                rs = stmt.executeQuery("Select * from product where Status = 'Active'");  
             }

           // System.out.println("Hello");

            Statement stmt1 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet rs1 = stmt1.executeQuery("Select * from debtor where Status = 'Active'");


            Statement stmt2 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet rs2 = stmt2.executeQuery("Select * from sales");

            Statement stmt3 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);




            while (rs.next()) {
                String productS = rs.getString("productID");
                String productName = rs.getString("productName");
                pName.add(Pindex, productName);
                pNumber.add(Pindex, productS);

                ResultSet rs3 = stmt3.executeQuery("Select * from new_stock where productID = " + productS + " and Status = 'Current'");
                if (rs3.next()) {
                    String availableS = rs3.getString("Current");
                    //String productName = rs3.getString("productName");
                    available.add(Sindex, availableS);
                    //  pNumber.add(Sindex,productS); 
                    Sindex++;
                }
                Pindex++;
                product.addItem(productName);
            }
            while (rs1.next()) {
                String debtorS = rs1.getString("Customer_ID");
                String debtorName = rs1.getString("Name");
                cName.add(Dindex, debtorName);
                cNumber.add(Dindex, debtorS);
                Dindex++;
         
            }

        } catch (SQLException e) {

            System.out.println("2 Error : " + e);
            JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n " + e);
        } catch (Exception ex) {
            System.out.println("Error 1:" + ex);
            JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n" + ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SalesItem().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DisplayDate;
    public static javax.swing.JButton admit;
    public static javax.swing.JTextField avail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JComboBox product;
    public static javax.swing.JFormattedTextField quantity;
    public static javax.swing.JFormattedTextField rate;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
