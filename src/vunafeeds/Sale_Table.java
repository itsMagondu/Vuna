/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Sale_Detailed.java
 *
 * Created on Jul 27, 2012, 4:41:50 PM
 */
package vunafeeds;

import java.awt.Desktop;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Magondu
 */
public class Sale_Table extends javax.swing.JFrame {

    //int rowCount = 0;
    ArrayList<String> cName = new ArrayList<String>();
    ArrayList<String> cNumber = new ArrayList<String>();
    ArrayList<String> pName = new ArrayList<String>();
    ArrayList<String> pNumber = new ArrayList<String>();
    ArrayList<String> available = new ArrayList<String>();
    private ArrayList<String> itemList;
    String table[][] = new String[100][5];
    int n = 1;

    /** Creates new form Sale_Detailed */
    public Sale_Table() {

        initComponents();
        setLocationRelativeTo(null);
        itemList = new ArrayList<String>();
        populateCreditors();
        generateReciept.setEnabled(false);

        //saleTable.
        //editTable.setModel(new MyTableModel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        generateReciept = new javax.swing.JButton();
        total = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        customer = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        Sell = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        addItem = new javax.swing.JButton();
        removeItem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        saleTable = new javax.swing.JTable();
        sale = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sale");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        generateReciept.setText("Generate Reciept");

        total.setEditable(false);

        jLabel1.setText("Total:");

        customer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Customer:");

        jLabel3.setText("Date:");

        jLabel4.setBackground(new java.awt.Color(110, 189, 235));
        jLabel4.setFont(new java.awt.Font("Cambria", 1, 24));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Sales");
        jLabel4.setOpaque(true);

        Sell.setText("Sell");
        Sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellActionPerformed(evt);
            }
        });

        addItem.setText("Add item");
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        removeItem.setText("Remove Item");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });

        saleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item", "Items Bought", "Rate", "Total", "Product Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(saleTable);

        sale.setEditable(false);

        jLabel5.setText("SaleID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sale, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addItem, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 207, Short.MAX_VALUE)
                        .addComponent(generateReciept)
                        .addGap(18, 18, 18)
                        .addComponent(Sell, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addItem)
                    .addComponent(removeItem)
                    .addComponent(Sell, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed

        // if (saleTable.getValueAt(row, 5) == null && itemstable.getValueAt(row, 3) != null) {
        //     JOptionPane.showMessageDialog(null, "Press enter to continue");
        // } else {
        //     new LISTOFITEMS(itemstable, list);
        // }

        SaleItemDialog win = new SaleItemDialog(this, true, saleTable, itemList);
        win.setVisible(true);


    }//GEN-LAST:event_addItemActionPerformed

    private void populateCreditors() {
        customer.removeAllItems();
        customer.addItem("Cash");

        try {
            int Dindex = 0;

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vunafeeds", "root", "");

            Statement stmt1 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet rs1 = stmt1.executeQuery("Select * from debtor where Status = 'Active'");
            
            Statement stmt2 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                    ResultSet.CONCUR_READ_ONLY);
            ResultSet rs2 = stmt2.executeQuery("Select * from sales");

            while (rs1.next()) {
                String debtorS = rs1.getString("Customer_ID");
                String debtorName = rs1.getString("Name");
                cName.add(Dindex, debtorName);
                cNumber.add(Dindex, debtorS);
                Dindex++;
                customer.addItem(debtorName);
            }
            if (rs2.last()) {
                String id = rs2.getString("saleID");
                int intID = Integer.parseInt(id);
                intID++;
                sale.setText(String.valueOf(intID));
            } else {
                sale.setText("1");
            }
        } catch (SQLException e) {

            System.out.println("2 Error : " + e);
            JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n " + e);
        } catch (Exception ex) {
            System.out.println("Error 1:" + ex);
            JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n" + ex);
        }
    }

    private void SellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellActionPerformed
        generateReciept.setEnabled(true);
        String customer_name = (String) customer.getSelectedItem();
        java.util.Date dat = date.getDate();
        String customer_number = null;


        if (dat == null) {
            JOptionPane.showMessageDialog(null, "Please fill all fields");
        } else {
            try {
                if (customer_name.equalsIgnoreCase("Cash")) {
                    customer_number = "Cash";
                } else {
                    int cNum = cName.indexOf(customer_name);
                    customer_number = cNumber.get(cNum);
                    System.out.println("Customer" + customer_number);

                }
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd H:mm:ss");
                String saleDate = sdf.format(dat);

                int row_count = Tracker.getPointer();
                System.out.println("Rows:" + row_count);

                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/VunaFeeds", "root", "");
                con.setAutoCommit(false);
                PreparedStatement psmt = con.prepareStatement("INSERT into sales(productID,quantity,rate,Customer_ID,date) values (?,?,?,?,?)");

                for (int i = 0; i < row_count; i++) {

                    psmt.setString(1, saleTable.getValueAt(i, 4).toString());
                    psmt.setString(2, saleTable.getValueAt(i, 1).toString());
                    psmt.setString(3, saleTable.getValueAt(i, 2).toString());
                    psmt.setString(4, customer_number);
                    psmt.setString(5, saleDate);
                    psmt.addBatch();
                }

                int[] updateCounts = psmt.executeBatch();
                con.commit();

                JOptionPane.showMessageDialog(null, "You have made a sale to " + customer_name);

                //if (HomePage.toEdit.equals("EditSales")) {
                //    System.out.println("We cannot update the stock on an edit. Sorry :-)");
                //} else {
                Statement stmt1 = con.createStatement(ResultSet.TYPE_FORWARD_ONLY,
                        ResultSet.CONCUR_READ_ONLY);
                String items[] = new String [20];
                String item_rate [] = new String [20];
                String item_quantity [] = new String [20];
                String item_total [] = new String [20];
                String sale_total = total.getText();
                String sale_number = sale.getText();
                
                for (int j = 0; j < row_count; j++) {
                    String prodNum = saleTable.getValueAt(j, 4).toString();
                    String quantityS = saleTable.getValueAt(j, 1).toString();
                    
                    items[j] = saleTable.getValueAt(j, 0).toString();
                    item_quantity[j] = saleTable.getValueAt(j, 1).toString();
                    item_rate [j] = saleTable.getValueAt(j, 2).toString();
                    item_total[j] = saleTable.getValueAt(j, 3).toString();
                            
                    ResultSet rs1 = stmt1.executeQuery("Select * from new_stock where productID = '" + prodNum + "' and Status = 'Current'");
                    int previosQuan = 0;
                    int newQuantity = 0;
                    String newQuan = null;
                    if (rs1.next()) {
                        String prevQ = rs1.getString("Current");
                        previosQuan = Integer.parseInt(prevQ);
                        newQuantity = Integer.parseInt(quantityS);
                        newQuantity = previosQuan - newQuantity;
                        newQuan = String.valueOf(newQuantity);
                    }

                    PreparedStatement psmt0 = con.prepareStatement("UPDATE new_Stock set Status = 'Old' where Status = 'Current' and ProductId = '" + prodNum + "'");
                    PreparedStatement psmt1 = con.prepareStatement("INSERT into new_Stock(productID,Date,units,direction,status,current) values (?,?,?,?,?,?)");
                    psmt1.setString(1, prodNum);
                    psmt1.setString(2, saleDate);
                    psmt1.setString(3, quantityS);
                    psmt1.setString(4, "Out");
                    psmt1.setString(5, "Current");
                    psmt1.setString(6, newQuan);

                    psmt0.executeUpdate();
                    psmt1.executeUpdate();

                    //  }
                }
                generateReciept(items , item_quantity , item_rate , item_total , sale_number , sale_total , customer_name);
                this.dispose();
                Tracker.setPointertozero();
                Sale_Table win = new Sale_Table();
                win.setVisible(true);


            } catch (SQLException e) {

                System.out.println("2 Error : " + e);
                JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n " + e);
            } catch (Exception ex) {
                System.out.println("Error 1:" + ex);
                JOptionPane.showMessageDialog(null, "Oops!! An error occured. \n" + ex);
            }
        }

    }//GEN-LAST:event_SellActionPerformed

    private void generateReciept(String [] item, String [] item_qty,String [] item_rate,String [] item_total, String recieptNo,String sale_total, String cust) {
        String number = recieptNo;
        String CustomerName = cust;
        String[] Description = item;
        //{"Layers meal", "unga feeds", "dog meal"};
        String[] qty = item_qty;
        //{"10 kgs", "20 kgs", "10 kgs"};
        String[] rate = item_rate;
        //{"20", "30", "40"};
        String[] amount = item_total;
        //{"200", "600", "400"};
        String Reciept_total = sale_total;
                //"12,000";
        String html = "<!DOCTYPE html PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd>"
                + "<head>"
                + "<meta http-equiv=Content-Type content=text/html; charset=utf-8 />"
                + "<title>Untitled Document</title>"
                + "</head>"
                + "<body>"
                + "<table width=737 border=0>"
                + "<tr>"
                + "  <td width=213><p align=center>VUNA FEEDS LIMITED</p>"
                + "   <p align=center>P.O BOX 4606-00506</p>"
                + "   <p align=center>NAIROBI-KENYA</p>"
                + "  <p align=center>&nbsp;</p></td>"
                + " <td width=3>&nbsp;</td>"
                + " <td width=507 valign=top><table width=50% border=1 cellpadding=0 cellspacing=0 align=right vspace=0 bordercolor=#000000>"
                + " <tr valign=top>"
                + "   <td>PIN:P0787867767</td>"
                + "  <td>Sale ID:"+recieptNo+"</td>"
                + " </tr>"
                + " </table></td>"
                + "</tr>"
                + "<tr>"
                + " <td><table width=200 border=1 cellpadding=0 cellspacing=0 bordercolor=#000000>"
                + "   <tr>"
                + "     <td>Invoice To</td>"
                + " </tr>"
                + " <tr>"
                + "<td><p>"+CustomerName+"</p>"
                + "  <p>C/O Rachel</p>"
                + " <p>P.O.BoX 65765765 Ngecha</p>"
                + " <p>Tel:0723456432</p>"
                + " <p>Ref no: 000041</p></td>"
                + " </tr>"
                + "</table></td>"
                + " <td>&nbsp;</td>"
                + "  <td>&nbsp;</td>"
                + " </tr>"
                + " <tr>"
                + " <td colspan=3><table width=749 border=1 cellpadding=0 cellspacing=0 bordercolor=#000000>"
                + "   <tr>"
                + "  <td width=745><table width=100% border=1 cellpadding=0 cellspacing=0 bordercolor=#000000>"
                + " <tr>"
                + "  <td width=108><div align=center>Tally Sheet No </div></td>"
                + "<td width=94><div align=center>Date</div></td>"
                + " <td width=92><div align=center>Invoice</div></td>"
                + "  <td width=117><div align=center>Veh Reg No. </div></td>"
                + "<td width=109><div align=center>Appraisal No.</div></td>"
                + " <td width=98><div align=center>Terms</div></td>"
                + "<td width=120><div align=center>Due Date</div></td>"
                + " </tr>"
                + "<tr>"
                + " <td>&nbsp;</td>"
                + "<td>&nbsp;</td>"
                + "<td>&nbsp;</td>"
                + "<td>&nbsp;</td>"
                + "<td>&nbsp;</td>"
                + " <td>&nbsp;</td>"
                + " <td>&nbsp;</td>"
                + " </tr>"
                + " </table></td>"
                + " </tr>"
                + " <tr>"
                + " <td><table width=100% height=256 border=1 cellpadding=0 cellspacing=0 bordercolor=#000000>"
                + "  <tr height=10>"
                + "  <td width=309 height=23><div align=center>Description</div></td>"
                + " <td width=140><div align=center>Qty</div></td>"
                + " <td width=117><div align=center>Rate:</div></td>"
                + "<td width=155><div align=center>Amount</div></td>"
                + " </tr>"
                + "<tr valign=top>"
                + " <td height=229><div style=margin-top:0px; margin-left:0px; margin-bottom:auto;>" + Description[0] + "<br />" + Description[1] + "<br />" + Description[2] + "<br />"+ Description[3] + "<br />" + Description[4] + "<br />" + Description[5] +"<br />"+ Description[6] +"<br />"+  Description[7] + "<br />" + Description[8] + "<br />" + Description[9] + "</div></td>"
                + " <td><div style=margin-top:0px; margin-left:0px; margin-bottom:auto;><div align=center>" + qty[0] + "<br />" + qty[1] + "<br />" + qty[2] +"<br />" +qty[3] + "<br />" + qty[4] + "<br />" + qty[5]+"<br />" +qty[6] + "<br />" + qty[7] + "<br />" + qty[8] + "<br />" + qty[9] + "<br />" + qty[10]+ "</div></div></td>"
                + "<td><div style=margin-top:0px; margin-left:0px; margin-bottom:auto;><div align=center>" + rate[0] + "<br />" + rate[1] + "<br />" + rate[2] +"<br />"+rate[3] + "<br />" + rate[4] + "<br />" + rate[5] +"<br />"+rate[6] + "<br />" + rate[7] + "<br />" + rate[8] +"<br />" + rate[9] + "<br />" + rate[10] + "</div></div></td>"
                + " <td><div style=margin-top:0px; margin-left:0px; margin-bottom:auto;><div align=center>" + amount[0] + "<br />" + amount[1] + "<br />" + amount[2] + "<br />"+ amount[3] + "<br />" + amount[4] + "<br />" + amount[5] + "<br />" + amount[6] + "<br />" + amount[7] + "<br />" + amount[8] +"<br />" + amount[9] + "<br />" + amount[10] + "</div></div></td>"
                + " </tr>"
                + "  </table></td>"
                + " </tr>"
                + " <tr>"
                + " <td><table width=754 border=1 cellpadding=0 cellspacing=0 bordercolor=#000000>"
                + " <tr>"
                + "<td width=463>&nbsp;</td>"
                + "<td width=121><div align=center><strong>Total</strong></div></td>"
                + " <td width=162><div align=center><strong>" + Reciept_total + "</strong></div></td>"
                + " </tr>"
                + " </table></td>"
                + " </tr>"
                + " <tr>"
                + "<td>Passed by:.......................................Date:..............................................Authorised By:..........................Date:............... </td>"
                + "</tr>"
                + " <tr>"
                + "<td>Driver's Name........................................................Sign...................................................Date:..................................... </td>"
                + " </tr>"
                + " <tr>"
                + " <td><div align=center>Received above goods in good order and condition.</div></td>"
                + "</tr>"
                + " <tr>"
                + "  <td>Received by: Name................................................Sign....................................................Date....................................... </td>"
                + " </tr>"
                + " </table></td>"
                + "</tr>"
                + "</table>"
                + "</body>"
                + "</html>";
        new File("C:\\VunaReciepts\\"+CustomerName).mkdirs();
        File htmlFile = new File("C:\\VunaReciepts\\"+CustomerName+"\\Reciept"+number+".html");
        FileWriter writer = null;
        try {
            writer = new FileWriter(htmlFile);
            writer.write(html);
            writer.flush();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "The following error occured\n"+ex,"Error",JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "The following error occured\n"+ex,"Error",JOptionPane.ERROR_MESSAGE);       
                    ex.printStackTrace();
                }
            }
        }
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.print(htmlFile);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Printing failed!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        try {
            int selected = saleTable.getSelectedRow();
            //System.out.println(selected);
            //Object select = saleTable.getValueAt(selected, 5);
            //Object select2 = saleTable.getValueAt(selected, 0);
            String tot = total.getText();
            System.out.println("Total is " + tot);
            if (tot.length() == 0) {
                //if (select != null) {
                int value = Integer.parseInt(saleTable.getValueAt(selected, 3).toString());
                int totalnow = Integer.parseInt(total.getText());
                String afta = String.valueOf(totalnow - value);
                total.setText(afta);
                itemList.remove(saleTable.getValueAt(selected, 0));

                DefaultTableModel model = (DefaultTableModel) saleTable.getModel();
                model.removeRow(selected);
                model.insertRow(saleTable.getRowCount(), new Vector());
                saleTable.setModel(model);
                total.setText(" ");
                Tracker.decrementPointer();
            } else {
                String toRemove = (String) saleTable.getValueAt(selected, 3);
                double toRemove_double = Double.parseDouble(toRemove);
                double Total = Double.parseDouble(tot);
                Total = Total - toRemove_double;
                total.setText(String.valueOf(Total));

                itemList.remove(saleTable.getValueAt(selected, 0));
                DefaultTableModel model = (DefaultTableModel) saleTable.getModel();
                model.removeRow(selected);
                model.insertRow(saleTable.getRowCount(), new Vector());
                saleTable.setModel(model);

                Tracker.decrementPointer();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select a valid item");
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_removeItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Sale_Table().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Sell;
    private javax.swing.JButton addItem;
    private javax.swing.JComboBox customer;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JButton generateReciept;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton removeItem;
    public static javax.swing.JTextField sale;
    private javax.swing.JTable saleTable;
    public static javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
